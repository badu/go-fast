// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9f2eff5fDecodeGithubComTylertreatGoFastSerializationEasyjson(in *jlexer.Lexer, out *Struct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field1":
			out.Field1 = string(in.String())
		case "Field2":
			out.Field2 = int(in.Int())
		case "Field3":
			if in.IsNull() {
				in.Skip()
				out.Field3 = nil
			} else {
				in.Delim('[')
				if out.Field3 == nil {
					if !in.IsDelim(']') {
						out.Field3 = make([]string, 0, 4)
					} else {
						out.Field3 = []string{}
					}
				} else {
					out.Field3 = (out.Field3)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Field3 = append(out.Field3, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Field4":
			out.Field4 = uint64(in.Uint64())
		case "Field5":
			out.Field5 = string(in.String())
		case "Field6":
			out.Field6 = string(in.String())
		case "Field7":
			if in.IsNull() {
				in.Skip()
				out.Field7 = nil
			} else {
				out.Field7 = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9f2eff5fEncodeGithubComTylertreatGoFastSerializationEasyjson(out *jwriter.Writer, in Struct) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field1\":")
	out.String(string(in.Field1))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field2\":")
	out.Int(int(in.Field2))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field3\":")
	if in.Field3 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in.Field3 {
			if v3 > 0 {
				out.RawByte(',')
			}
			out.String(string(v4))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field4\":")
	out.Uint64(uint64(in.Field4))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field5\":")
	out.String(string(in.Field5))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field6\":")
	out.String(string(in.Field6))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Field7\":")
	out.Base64Bytes(in.Field7)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Struct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9f2eff5fEncodeGithubComTylertreatGoFastSerializationEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Struct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9f2eff5fEncodeGithubComTylertreatGoFastSerializationEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Struct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9f2eff5fDecodeGithubComTylertreatGoFastSerializationEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Struct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9f2eff5fDecodeGithubComTylertreatGoFastSerializationEasyjson(l, v)
}
